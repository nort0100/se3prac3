Test plan for 2048 Game

Testing for the 2048 game will cover most of the code, it won't be practical to cover everything. Unit testing will be 
conducted first, this will be whitebox. Following this integration testing will be conducted, this will be blackbox. Finally
system tests will be conducted, this will also be black box. Destructive testing will used in conjunction with this testing
to ensure the program is reliable, as compared to many programs there are limited outcomes for this program. Following this 
alpha/beta testing will conducted to ensure the program works as it is supposed to.

The main focus will be on the tilt.c file which contains the code to implement the board pieces to move and correctly add, 
if applicable. To some extent the board.c and main.c will used but mainly to assist the testing of tilt.c. Having said that these
 classes will also be tested seperately using dummy data/methods etc. to allow testing at the unit/integration levels. keyboard.c
  will also be tested mainly at the unit level.
  
Specifically the test items are:
tilt.c
main.c
board.c
keyboard.c

Any other files in the project may be needed for the program to run succesfully but will not be specifically tested.
They will be used as required, dummied where applicable.

The features that will be tested:
Correct movement of pieces
Correct addition of pieces
Correct response from input
Program running correctly(main.c)-Using dummy data etc.
The overall program

The features that won't be tested:
None in particular-This plan is designed to be fairly comprehensive

The testing will be started with unit testing. Once complete to satisfactory standard outlined below integration testing can 
 begin. Integration testing will then be completed, with a focus on destructive testing, to ensure the program can handle 
 incorrect data etc. Once complete to a satisfactory standard, system testing will commence. System testing will be a combination
 of standard(pass/fail) testing and destructive testing where applicable.
Alpha/Beta testing will occur after the above testing has been completed. This will not be a focus,but will be needed to be 
completed for overall comprehensive testing to have occurred.

For the Unit Testing:
Input data will be given and based on the known code, correct ouput needs to occur. Pass will occur when output data = expected
 data values. Fail if !=. Some incorrect data will be given as part of destructive testing.
 
For the Integration Testing:
A combination of real and dummy input data will be given. As in unit testing output data will be compared to expected data values.
If = Pass. Else a fail. Correct data will be given at first, before incorrect data introduced as part of destructive testing.

For the Systems Testing:
All methods etc. used, real data input. Pass if output data = expected data values. Fail otherwise.
Will test as many possibilities as possible. Destructive testing will be part of this, for correctness.

Alpha/Beta Testing:
No specific pass/fail. Mainly to find errors and potential bugs in complete system.
Destructive testing will part of this, users will likely try and force an error, find a bug.

Tests will need to deliver pass/fail. As well as this cause of failure needs to be noted, particularly if failure occurs
 not as a result of incorrect data. Check on expected data will need to be double checked.
For program to be correct 100% of unit testing needs to pass. Will need to modifed until this holds true.
Integration testing 90% will need to be correct, before progressing to System Testing. Will need to further develop code
 until closer to 100% is complete and system testing recompleted.
System testing should be close to 100% correct as possible. On first try 90% will be accepted.
Alpha/Beta testing will need to have reports associated with any errors or bugs found. Code needs to modified, being careful
 of possible regressions. Possibly have to re-do integration and system testing again.

Overall testing will be complete when sufficient testing has been completed to allow Alpha/Beta testing to occur.
Otherwise program will have to be modified until Alpha/Beta testing can commence.
